from flask import Flask, request, jsonify
from flask_cors import CORS
import pandas as pd
import numpy as np
from tensorflow.keras.models import load_model
import joblib

app = Flask(__name__)
CORS(app)  # Allow CORS for all origins (including localhost:4000 from Express)

lstm_model = load_model('lstm_model.h5')
isolation_forest = joblib.load('isolation_forest.pkl')
scaler = joblib.load('scaler.pkl')

# Note: Your latest app.py references 'encoders.pkl', which isn’t generated by trainLSTM.py.
# I’ll assume it’s a typo or you have a separate training script. If not, we’ll need to adjust.
# For now, I’ll simplify to match your trainLSTM.py and trafficController.js inputs.

@app.route('/predict-delay', methods=['POST'])
def predict_delay():
    data = request.json
    recent_delays = data['recentDelays']
    time_of_day = data['timeOfDay']
    day_of_week = data['dayOfWeek']
    weather = {'Clear': 0, 'Rain': 1, 'Fog': 2, 'Clouds': 3}.get(data['weather'], 0)
    # Ignore extra params (accidents, concerts, etc.) for now since LSTM wasn’t trained on them
    # If you have encoders.pkl, ensure it’s generated and loaded correctly

    if len(recent_delays) != 4:
        return jsonify({'error': 'recentDelays must contain exactly 4 values'}), 400

    # Use minute=0 since trainLSTM.py doesn’t use it dynamically
    features = [[time_of_day, 0, day_of_week, weather, delay] for delay in recent_delays]
    features_scaled = scaler.transform(np.array(features))
    features_seq = np.array([features_scaled])

    predicted_delay = lstm_model.predict(features_seq)[0][0]
    return jsonify({'predictedDelay': float(predicted_delay)})

@app.route('/detect-anomaly', methods=['POST'])
def detect_anomaly():
    data = request.json
    delay = data['delay']
    hour = data['hour']
    day_of_week = data['dayOfWeek']

    features = np.array([[delay, hour, day_of_week]])
    prediction = isolation_forest.predict(features)
    is_anomaly = prediction[0] == -1
    return jsonify({'isAnomaly': is_anomaly})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000,debug =True)  # Set debug=True for development